{"version":3,"sources":["chord/channels.cljc"],"mappings":"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","names":["chord.channels/read-from-ws!","ws","ch","ev","message","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","chord.channels/write-to-ws!","c__46136__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__46137__auto__","switch__46033__auto__","state_53366","state_val_53367","statearr-53368","cljs.core.async.impl.ioc-helpers/take!","inst_53364","cljs.core.async.impl.ioc-helpers/return-chan","inst_53356","statearr-53371","statearr-53372","statearr-53373","inst_53358","statearr-53374","statearr-53375","statearr-53376","inst_53362","statearr-53377","statearr-53380","state-machine__46034__auto__","ret-value__46035__auto__","result__46036__auto__","cljs.core/keyword-identical?","e53381","js/Object","ex__46037__auto__","statearr-53382","cljs.core.async.impl.ioc-helpers/process-exception","state__46138__auto__","statearr-53383","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","chord.channels/bidi-ch","p__53389","vec__53390","map__53393","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq53384","G__53385","cljs.core/first","cljs.core/next","G__53386","self__4776__auto__","read-ch","write-ch","on-close","js/chord","js/chord.channels","js/chord.channels.t_chord$channels53395","chord.channels/t_chord$channels53395","_53397","meta53396","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","chord.channels/->t_chord$channels53395","_","handler","cljs.core.async.impl.protocols/take!","msg","cljs.core.async.impl.protocols/put!","cljs.core.async.impl.protocols/close!"],"sourcesContent":["(ns chord.channels\n  (:require #?(:clj [org.httpkit.server :as http])\n\n            #?(:clj\n               [clojure.core.async :refer [chan <! >! put! close! go-loop]]\n               :cljs\n               [cljs.core.async :refer [chan put! close! <! >!]])\n\n            #?(:clj\n               [clojure.core.async.impl.protocols :as p]\n               :cljs\n               [cljs.core.async.impl.protocols :as p]))\n\n  #?(:cljs (:require-macros [cljs.core.async.macros :refer [go-loop]])))\n\n(defn read-from-ws! [ws ch]\n  #?(:clj\n     (http/on-receive ws #(put! ch {:message %}))\n\n     :cljs\n     (set! (.-onmessage ws)\n           (fn [ev]\n             (let [message (.-data ev)]\n               (put! ch {:message message}))))))\n\n(defn write-to-ws! [ws ch]\n  (go-loop []\n    (let [msg (<! ch)]\n      (when msg\n        #?(:clj\n           (http/send! ws msg)\n\n           :cljs\n           (.send ws msg))\n        (recur)))))\n\n(defn bidi-ch [read-ch write-ch & [{:keys [on-close]}]]\n  (reify\n    p/ReadPort\n    (take! [_ handler]\n      (p/take! read-ch handler))\n\n    p/WritePort\n    (put! [_ msg handler]\n      (p/put! write-ch msg handler))\n\n    p/Channel\n    (close! [_]\n      (p/close! read-ch)\n      (p/close! write-ch)\n      (when on-close\n        (on-close)))))\n"]}