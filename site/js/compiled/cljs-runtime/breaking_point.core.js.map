{"version":3,"sources":["breaking_point/core.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__53720","vec__53721","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__53724","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","_","breakpoints","debounce-ms","opts","G__53726","G__53727","re-frame.core/reg-cofx","coeffect","screen-width","or__4185__auto__","G__53729","js/window","G__53731","js/document","G__53732","screen-height","G__53734","G__53736","G__53737","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__53738","map__53739","breaking-point.core/set-screen-dimensions","db","cljs.core/assoc-in","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__53741","re-frame.core/inject-cofx","p__53742","vec__53743","breaking-point.core/get-screen-width","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","breaking-point.core/get-screen-height","breaking-point.core/->get-screen","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__53746","vec__53747","prev-breakpoint","screen-key","breakpoint","cljs.core/reduced","cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2","p__53750","vec__53751","breaking-point.core/get-orientation","breaking-point.core/register-subs","G__53754","G__53755","re-frame.core/reg-sub","G__53756","G__53757","G__53758","G__53759","G__53760","G__53761","G__53762","G__53763","G__53764","G__53765","G__53766","G__53767","G__53768","G__53769","G__53770","G__53771","orientation","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__53772","G__53773","G__53774","G__53775","screen-keys","G__53776","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__53777","vec__53778","i","k","cljs.core/even?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/second","seq__53781","cljs.core/seq","chunk__53782","count__53783","i__53784","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__53793","G__53794","G__53795","G__53796","G__53797","G__53798","G__53799","G__53800","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/name","screen","p__53801","map__53802","breaking-point.core/set-breakpoints","G__53804","re-frame.core/dispatch","G__53805","G__53806","G__53807","G__53808","re-frame.core/reg-fx"],"sourcesContent":["(ns breaking-point.core\n  (:require\n   [re-frame.core :as rf]\n   [re-frame-fx.dispatch]\n   ))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; PUBLIC API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(rf/reg-event-fx\n ::set-breakpoints\n (fn [_ [_ {:keys [breakpoints ;; required\n                   debounce-ms ;; optional\n                   ]\n            :as   opts}]]\n   {::set-breakpoints opts}))\n\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; COFX\n\n(rf/reg-cofx\n ::screen-dimensions\n (fn [coeffect]\n   (let [screen-width  (or (some-> js/window\n                                   .-innerWidth)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientWidth)\n                           (some-> js/document\n                                   .-body\n                                   .-clientWidth))\n         screen-height (or (some-> js/window\n                                   .-innerHeight)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientHeight)\n                           (some-> js/document\n                                   .-body\n                                   .-clientHeight))]\n     (assoc coeffect\n            :screen-width screen-width\n            :screen-height screen-height))))\n\n\n;; Events\n\n(defn set-screen-dimensions\n  [{:keys [db\n           screen-width\n           screen-height]} _]\n  {:db (-> db\n           (assoc-in [::breakpoints :screen-width] screen-width)\n           (assoc-in [::breakpoints :screen-height] screen-height))})\n\n(rf/reg-event-fx ::set-screen-dimensions\n                 [(rf/inject-cofx ::screen-dimensions)]\n                 set-screen-dimensions)\n\n(rf/reg-event-fx ::set-screen-dimensions-debounced\n                 (fn [_ [_ debounce-ms]]\n                   {:dispatch-debounce [{:id      ::calcaulate-width-after-resize\n                                         :timeout debounce-ms\n                                         :action  :dispatch\n                                         :event   [::set-screen-dimensions]}]}))\n\n\n;; Subs\n\n(defn get-screen-width [db _]\n  (get-in db [::breakpoints :screen-width]))\n\n(defn get-screen-height [db _]\n  (get-in db [::breakpoints :screen-height]))\n\n\n(defn ->get-screen [breakpoints]\n  (fn get-screen\n    [screen-width _]\n    (when screen-width\n      (reduce\n       (fn [prev-breakpoint [screen-key breakpoint]]\n         (if (or (nil? breakpoint)\n                 (and (< screen-width breakpoint)\n                      (>= screen-width prev-breakpoint)))\n           (reduced screen-key)\n           breakpoint))\n       0\n       (partition-all 2 breakpoints)))))\n\n\n(defn get-orientation\n  [[screen-width\n    screen-height] _]\n  (if (> screen-height\n         screen-width)\n    :portrait\n    :landscape))\n\n\n(defn register-subs [breakpoints]\n  (rf/reg-sub ::screen-width get-screen-width)\n  (rf/reg-sub ::screen-height get-screen-height)\n\n  (rf/reg-sub ::screen\n              :<- [::screen-width]\n              (->get-screen breakpoints))\n\n  (rf/reg-sub ::orientation\n              :<- [::screen-width]\n              :<- [::screen-height]\n              get-orientation)\n\n  (rf/reg-sub ::portrait?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :portrait)))\n\n  (rf/reg-sub ::landscape?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :landscape)))\n\n  (let [screen-keys (some->> breakpoints\n                             (map-indexed vector)\n                             (filter (fn [[i k]]\n                                       (even? i)))\n                             (mapv second))]\n    (doseq [screen-key screen-keys]\n      (rf/reg-sub (keyword \"breaking-point.core\"\n                           (str (name screen-key) \"?\"))\n                  :<- [::screen]\n                  (fn [screen _]\n                    (= screen\n                       screen-key))))))\n\n\n;; FX\n\n(defn set-breakpoints [{:keys [breakpoints\n                               debounce-ms]\n                        :as   opts}]\n  (register-subs breakpoints)\n  (rf/dispatch [::set-screen-dimensions])\n  (.addEventListener js/window \"resize\"\n                     #(if debounce-ms\n                        (rf/dispatch [::set-screen-dimensions-debounced debounce-ms])\n                        (rf/dispatch [::set-screen-dimensions]))\n                     true))\n\n(rf/reg-fx\n ::set-breakpoints\n set-breakpoints)\n"]}