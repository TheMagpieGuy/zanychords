{"version":3,"sources":["re_chain/core.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/rep-impl","cljs.core/keyword?","cljs.spec.alpha/map-spec-impl","G__55812","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__55813","cljs.core/coll?","re-chain.core/links","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-chain.core/step-id","event-id","counter","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/namespace","cljs.core/name","re-chain.core/replace-pointers","next-event","effects","clojure.walk/postwalk","x","G__55815","G__55816","re-frame.core/console","fexpr__55817","re-chain.core/single-valid-link","links","cljs.core/deref","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__55818","map__55819","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","get-dispatch","effect-present?","and__4174__auto__","cljs.core/not","cljs.core/count","cljs.core/first","re-chain.core/dispatch-empty-or-next","next-event-id","event","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-chain.core/single-valid-next","xs","p__55822","map__55823","re-chain.core/select-link","or__4185__auto__","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__55825","vec__55826","seq__55827","cljs.core/seq","first__55828","cljs.core/next","re-chain.core/make-event","previous-event-params","_","params","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","re-chain.core/link-effects","event-params","temp__5733__auto__","map__55829","set-dispatch","G__55831","G__55832","re-chain.core/effect-postprocessor","ctx","cljs.core/rest","G__55838","G__55839","re-frame.core/get-coeffect","p1__55833#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-chain.core/chain-interceptor","current-event-id","G__55841","G__55842","G__55843","G__55844","re-frame.core/->interceptor","re-chain.core/collect-named-event-instructions","step-fns","chain-handlers","cljs.spec.alpha/conform","expound.alpha/expound","cljs.spec.alpha/explain-data","cljs.core.partition.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__55845","vec__55846","map__55849","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","id","event-handler","handler-1","handler-2","next-id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-chain.core/collect-event-instructions","key","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__55851","vec__55852","current-handler","next-handler","map__55855","fn","interceptors","re-chain.core/register-chain-handlers!","instructions","user-interceptors","seq__55857","chunk__55858","count__55859","i__55860","map__55865","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__55870","interceptor","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-chain.core/reg-chain-named*","seq55873","G__55874","self__4776__auto__","re-chain.core/reg-chain*","seq55875","G__55876","G__55877","re-chain.core/configure!","chain-links","cljs.core/reset!","re-chain.core/reg-chain-named","seq55878","self__4777__auto__","handlers","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","re-chain.core/reg-chain","seq55879","G__55880","cljs.core.apply.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns re-chain.core\n  (:require [clojure.walk :as walk]\n            [re-frame.core :as rf]\n            #?(:cljs [cljs.spec.alpha :as s]\n               :clj  [clojure.spec.alpha :as s])\n            [expound.alpha :as e]))\n\n(s/def ::handler (s/cat :interceptors (s/? vector?) :fn fn?))\n(s/def ::handlers (s/* ::handler))\n(s/def ::named-handlers (s/* (s/cat :id keyword? :event-handler ::handler)))\n(s/def ::effect-present? fn?)\n(s/def ::get-dispatch fn?)\n(s/def ::set-dispatch fn?)\n(s/def ::link (s/keys :req-un [::effect-present? ::get-dispatch ::set-dispatch]))\n(s/def ::links (s/nilable (s/coll-of ::link)))\n\n(def links (atom []))\n\n(defn step-id [event-id counter]\n  (if (= 0 counter)\n    event-id\n    (keyword\n      (str (namespace event-id)\n           (if (namespace event-id) \"/\")\n           (name event-id)\n           \"-\" counter))))\n\n(defn replace-pointers [next-event effects]\n  (walk/postwalk\n    (fn [x]\n      (when (= x :kee-frame.core/next)\n        (rf/console :warn \"Keyword :kee-frame.core/next is deprecated, use :chain/next instead.\"))\n      (if (#{:kee-frame.core/next :chain/next} x)\n        next-event\n        x))\n    effects))\n\n(defn single-valid-link [effects]\n  (let [links (->> @links\n                   (filter (fn [{:keys [get-dispatch effect-present?]}]\n                             (and (effect-present? effects)\n                                  (not (get-dispatch effects))))))]\n    (when (= 1 (count links))\n      (first links))))\n\n(defn dispatch-empty-or-next [effects next-event-id]\n  (when (or (not (:dispatch effects))\n            (-> effects\n                :dispatch\n                first\n                (= next-event-id)))\n    {:get-dispatch :dispatch\n     :set-dispatch (fn [effects event] (assoc effects :dispatch event))}))\n\n(defn single-valid-next [next-event-id effects]\n  (let [xs (->> @links\n                (filter (fn [{:keys [get-dispatch]}]\n                          (= next-event-id\n                             (-> effects get-dispatch first)))))]\n    (when (= 1 (count xs))\n      (first xs))))\n\n(defn select-link [next-event-id effects]\n  (or\n    (single-valid-next next-event-id effects)\n    (single-valid-link effects)\n    (dispatch-empty-or-next effects next-event-id)\n    (throw\n      (ex-info \"Not possible to select next in chain\"\n               {:next-id  next-event-id\n                :dispatch (:dispatch effects)\n                :links    @links}))))\n\n(defn make-event [next-event-id previous-event-params [_ & params]]\n  (into [next-event-id] (concat previous-event-params params)))\n\n(defn link-effects [next-event-id event-params effects]\n  (if next-event-id\n    (if-let [{:keys [set-dispatch get-dispatch]} (select-link next-event-id effects)]\n      (set-dispatch effects (make-event next-event-id event-params (get-dispatch effects)))\n      effects)\n    effects))\n\n(defn effect-postprocessor [next-event-id]\n  (fn [ctx]\n    (let [event-params (rest (rf/get-coeffect ctx :event))]\n      (update ctx :effects #(->> %\n                                 (replace-pointers next-event-id)\n                                 (link-effects next-event-id event-params))))))\n\n(defn chain-interceptor [current-event-id next-event-id]\n  (rf/->interceptor\n    :id current-event-id\n    :after (effect-postprocessor next-event-id)))\n\n(defn collect-named-event-instructions [step-fns]\n  (let [chain-handlers (s/conform ::named-handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::named-handlers step-fns)\n      (throw (ex-info \"Invalid named chain. Should be pairs of keyword and handler\" (s/explain-data ::named-handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map (fn [[{:keys [id event-handler] :as handler-1} handler-2]]\n                (let [next-id (:id handler-2)]\n                  (assoc handler-1 :next-id (:id handler-2)\n                                   :interceptors (:interceptors event-handler)\n                                   :event-handler (:fn event-handler)\n                                   :interceptor (chain-interceptor id next-id))))))))\n\n(defn collect-event-instructions [key step-fns]\n  (let [chain-handlers (s/conform ::handlers step-fns)]\n    (when (= ::s/invalid chain-handlers)\n      (e/expound ::handlers step-fns)\n      (throw (ex-info \"Invalid chain. Should be functions or pairs of interceptor and function\" (s/explain-data ::handlers step-fns))))\n    (->> chain-handlers\n         (partition 2 1 [nil])\n         (map-indexed (fn [counter [current-handler next-handler]]\n                        (let [{:keys [fn interceptors]} current-handler\n                              id (step-id key counter)\n                              next-id (when next-handler (step-id key (inc counter)))]\n                          {:id            id\n                           :next-id       next-id\n                           :event-handler fn\n                           :interceptors  interceptors\n                           :interceptor   (chain-interceptor id next-id)}))))))\n\n(defn register-chain-handlers! [instructions user-interceptors]\n  (doseq [{:keys [id event-handler interceptor interceptors]} instructions]\n    (rf/reg-event-fx id (into [interceptor] (concat user-interceptors interceptors)) event-handler)))\n\n(defn reg-chain-named*\n  \"Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [interceptors & step-fns]\n  (let [instructions (collect-named-event-instructions step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn reg-chain*\n  \"Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.\"\n  [id interceptors & step-fns]\n  (let [instructions (collect-event-instructions id step-fns)]\n    (register-chain-handlers! instructions interceptors)))\n\n(defn configure!\n  \"re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  \"\n  [chain-links]\n  (reset! links chain-links))\n\n(defn reg-chain-named\n  \"Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \\\"...\\\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [& handlers]\n  (apply reg-chain-named* nil handlers))\n\n(defn reg-chain\n  \"Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \\\"/customer/\\\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```\"\n  [id & handlers]\n  (apply reg-chain* id nil handlers))"]}