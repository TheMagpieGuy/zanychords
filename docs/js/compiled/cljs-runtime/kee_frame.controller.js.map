{"version":3,"sources":["kee_frame/controller.cljc"],"mappings":"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","names":["kee-frame.controller/process-params","params","route","cljs.core/vector?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/ifn?","kee-frame.controller/validate-and-dispatch!","dispatch","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","expound.alpha/expound","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain-data","re-frame.core/dispatch","kee-frame.controller/debug-enabled?","map__56144","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","controllers?","kee-frame.state/debug-config","and__4174__auto__","kee-frame.state/debug?","kee-frame.controller/start!","id","ctx","start","G__56146","G__56147","G__56148","G__56149","G__56150","re-frame.core/console","G__56151","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","kee-frame.controller/stop!","stop","G__56152","G__56153","G__56154","p__56155","map__56156","cljs.core.get.cljs$core$IFn$_invoke$arity$2","kee-frame.controller/process-controller","last-params","current-params","ocr-56161","cljs.core.match/backtrack","e56195","js/Error","e__54855__auto__","e56200","e56201","e56196","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","kee-frame.controller/apply-route","controllers","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__56207","vec__56208","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","controller","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns ^:no-doc kee-frame.controller\n  (:require\n    [re-frame.core :as rf]\n    #?(:cljs\n       [cljs.core.match :refer [match]])\n    #?(:clj\n    [clojure.core.match :refer [match]])\n    [kee-frame.state :as state]\n    [kee-frame.spec :as spec]\n    [clojure.spec.alpha :as s]\n    [expound.alpha :as e]))\n\n(defn process-params [params route]\n  (cond\n    (vector? params) (get-in route params)\n    (ifn? params) (params route)))\n\n(defn validate-and-dispatch! [dispatch]\n  (when dispatch\n    (when-not (s/valid? ::spec/event-vector dispatch)\n      (e/expound ::spec/event-vector dispatch)\n      (throw (ex-info \"Invalid dispatch value\"\n                      (s/explain-data ::spec/event-vector dispatch))))\n    (rf/dispatch dispatch)))\n\n(defn debug-enabled? []\n  (let [{:keys [controllers?]\n         :or   {controllers? true}} @state/debug-config]\n    (and @state/debug?\n         controllers?)))\n\n(defn start! [id ctx start params]\n  (when start\n    (when (debug-enabled?)\n      (rf/console :log \"Starting controller \" id \" with params \" params))\n    (cond\n      (vector? start) (rf/dispatch (conj start params))\n      (ifn? start) (validate-and-dispatch! (start ctx params)))))\n\n(defn stop! [id ctx stop]\n  (when stop\n    (when (debug-enabled?)\n      (rf/console :log \"Stopping controller \" id))\n    (cond\n      (vector? stop) (rf/dispatch stop)\n      (ifn? stop) (validate-and-dispatch! (stop ctx)))))\n\n(defn process-controller [id {:keys [last-params params start stop]} ctx route]\n  (let [current-params (process-params params route)]\n    (match [last-params current-params (= last-params current-params)]\n           [_ _ true] nil\n           [nil _ false] (start! id ctx start current-params)\n           [_ nil false] (stop! id ctx stop)\n           [_ _ false] (do (stop! id ctx stop)\n                           (start! id ctx start current-params)))\n    current-params))\n\n(defn apply-route [controllers ctx route]\n  (->> controllers\n       (map (fn [[id controller]]\n              [id (assoc controller :last-params (process-controller id controller ctx route))]))\n       (into {})))"]}