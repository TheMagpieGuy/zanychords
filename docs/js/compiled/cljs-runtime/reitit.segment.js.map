{"version":3,"sources":["reitit/segment.cljc"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k56311","else__4442__auto__","G__56315","cljs.core/Keyword","data","path-params","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__56316","vec__56317","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__56310","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__56320","coll__4436__auto__","cljs.core/hash-unordered-coll","this56312","other56313","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__56321","cljs.core/keyword-identical?","expr__56322","G__56324","G__56325","G__56326","G__56327","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","reitit.segment/Match","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__56314","extmap__4478__auto__","G__56328","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","reitit.segment/->Match","reitit.segment/map->Match","x__4487__auto__","m__4488__auto__","reitit.segment/-insert","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","reitit.segment/-lookup","reitit.segment/Segment","this","ps","goog.object/set","G__56333","G__56334","G__56335","G__56336","G__56337","G__56338","_","reitit.segment/-catch-all","children","catch-all","p","reitit.impl/fast-get","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","var_args","G__56342","reitit.segment/segment","js/Error","reitit.segment.segment.cljs$core$IFn$_invoke$arity$4","wilds","match","children'","reitit.impl/fast-map","wilds?","js/reitit","js/reitit.segment","js/reitit.segment.t_reitit$segment56343","reitit.segment/t_reitit$segment56343","_56345","meta56344","cljs.core/PROTOCOL_SENTINEL","p__56349","vec__56350","seq__56351","first__56352","cljs.core/first","cljs.core/next","p__56369","vec__56370","seq__56371","first__56372","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","reitit.segment/->t_reitit$segment56343","d","cljs.core/not","vec__56356","w","c","fexpr__56362","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","reitit.impl/wild-param","reitit.impl/catch-all-param","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","p1__56339#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","reitit.segment.segment.cljs$core$IFn$_invoke$arity$0","and__4174__auto__","clojure.string/blank?","p1__56340#","cljs.core/some","reitit.segment/insert","trie","path","reitit.impl/segments","reitit.segment/compile","reitit.segment/scanner","compiled-tries","js/reitit.segment.t_reitit$segment56373","reitit.segment/t_reitit$segment56373","_56375","meta56374","reitit.segment/->t_reitit$segment56373","params","reitit.segment/lookup","temp__5733__auto__","reitit.impl/url-decode-coll"],"sourcesContent":["(ns reitit.segment\n  (:refer-clojure :exclude [-lookup compile])\n  (:require [reitit.impl :as impl]\n            [clojure.string :as str])\n  #?(:clj (:import (reitit SegmentTrie SegmentTrie$Match))))\n\n(defrecord Match [data path-params])\n\n(defprotocol Segment\n  (-insert [this ps data])\n  (-lookup [this ps path-params]))\n\n(extend-protocol Segment\n  nil\n  (-insert [_ _ _])\n  (-lookup [_ _ _]))\n\n(defn- -catch-all [children catch-all path-params p ps]\n  (-lookup\n    (impl/fast-get children catch-all)\n    nil\n    (assoc path-params catch-all (str/join \"/\" (cons p ps)))))\n\n(defn- segment\n  ([] (segment {} #{} nil nil))\n  ([children wilds catch-all match]\n   (let [children' (impl/fast-map children)\n         wilds? (seq wilds)]\n     ^{:type ::segment}\n     (reify\n       Segment\n       (-insert [_ [p & ps] d]\n         (if-not p\n           (segment children wilds catch-all d)\n           (let [[w c] ((juxt impl/wild-param impl/catch-all-param) p)\n                 wilds (if w (conj wilds w) wilds)\n                 catch-all (or c catch-all)\n                 children (update children (or w c p) #(-insert (or % (segment)) ps d))]\n             (segment children wilds catch-all match))))\n       (-lookup [_ [p & ps] path-params]\n         (if (nil? p)\n           (when match (assoc match :path-params path-params))\n           (or (-lookup (impl/fast-get children' p) ps path-params)\n               (if (and wilds? (not (str/blank? p))) (some #(-lookup (impl/fast-get children' %) ps (assoc path-params % p)) wilds))\n               (if catch-all (-catch-all children' catch-all path-params p ps)))))))))\n\n;;\n;; public api\n;;\n\n(defn insert\n  \"Returns a Segment Trie with path with data inserted into it. Creates the trie if `nil`.\"\n  [trie path data]\n  #?(:cljs (-insert (or trie (segment)) (impl/segments path) (map->Match {:data data}))\n     :clj  (.add (or ^SegmentTrie trie ^SegmentTrie (SegmentTrie.)) ^String path data)))\n\n(defn compile [trie]\n  \"Compiles the Trie so that [[lookup]] can be used.\"\n  #?(:cljs trie\n     :clj  (.matcher (or ^SegmentTrie trie (SegmentTrie.)))))\n\n(defn scanner [compiled-tries]\n  \"Returns a new compiled trie that does linear scan on the given compiled tries on [[lookup]].\"\n  #?(:cljs (reify\n             Segment\n             (-lookup [_ ps params]\n               (some (fn [trie] (-lookup trie ps params)) compiled-tries)))\n     :clj  (SegmentTrie/scanner compiled-tries)))\n\n(defn lookup [trie path]\n  \"Looks the path from a Segment Trie. Returns a [[Match]] or `nil`.\"\n  #?(:cljs (if-let [match (-lookup trie (impl/segments path) {})]\n             (assoc match :path-params (impl/url-decode-coll (:path-params match))))\n     :clj  (if-let [match ^SegmentTrie$Match (SegmentTrie/lookup trie path)]\n             (->Match (.data match) (clojure.lang.PersistentHashMap/create (.params match))))))\n"]}