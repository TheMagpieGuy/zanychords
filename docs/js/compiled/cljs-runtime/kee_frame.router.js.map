{"version":3,"sources":["kee_frame/router.cljc"],"mappings":"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","names":["kee-frame.router/default-chain-links","effects","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","dispatch","cljs.core/assoc-in","kee-frame.router/url","data","cljs.core/deref","kee-frame.state/router","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","kee-frame.api/data->url","kee-frame.router/goto","kee-frame.api/navigate!","kee-frame.state/navigator","kee-frame.router/nav-handler","router","path","temp__5733__auto__","route","kee-frame.api/url->data","G__56682","re-frame.core/dispatch","G__56683","G__56684","re-frame.core/console","G__56685","G__56686","G__56687","G__56688","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__56689","cljs.core/map?","i__13009__auto__","v__13010__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/any?","kee-frame.router/assert-route-data","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","expound.alpha/expound","cljs.spec.alpha/explain-data","kee-frame.router/url-not-found","routes","kee-frame.router/route-match-not-found","url","kee-frame.router/match-data","hash?","vec__56690","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","path-params","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","reitit.core/match-by-name","temp__5739__auto__","q","h","kee-frame.router/match-url","vec__56694","vec__56697","path+query","fragment","clojure.string/replace","clojure.string.split.cljs$core$IFn$_invoke$arity$3","query","G__56700","reitit.core/match-by-path","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","this__4439__auto__","k__4440__auto__","this__4441__auto__","k56702","else__4442__auto__","G__56706","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__56707","vec__56708","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__56701","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__56711","coll__4436__auto__","cljs.core/hash-unordered-coll","this56703","other56704","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4446__auto__","k__4447__auto__","pred__56712","cljs.core/keyword-identical?","expr__56713","G__56715","G__56716","G__56717","G__56718","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","kee-frame.router/ReititRouter","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__56705","extmap__4478__auto__","G__56720","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","kee-frame.router/->ReititRouter","kee-frame.router/map->ReititRouter","or__4185__auto__","kee-frame.router/bootstrap-routes","hash-routing?","scroll","initialized?","cljs.core/boolean","reitit.core.router.cljs$core$IFn$_invoke$arity$1","cljs.core/reset!","G__56723","G__56724","re-frame.core/reg-fx","kee-frame.scroll/start!","p1__56722#","kee-frame.interop/make-navigator","kee-frame.api/dispatch-current!","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__56725","vec__56726","db","initial","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","kee-frame.router/debug-enabled?","map__56729","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","routes?","kee-frame.state/debug-config","and__4174__auto__","kee-frame.state/debug?","kee-frame.router/reg-route-event","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","re-frame.core/debug","p__56731","p__56732","map__56733","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__56734","ctx","kee-frame.scroll/monitor-requests!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","kee-frame.state/controllers","kee-frame.controller/apply-route","p__56738","map__56739","kee-frame.router/start!","initial-db","app-db-spec","debug?","root-component","chain-links","screen","debug-config","kee-frame.interop/set-log-level!","kee-frame.state/app-db-spec","re-chain.core/configure!","G__56741","re-frame.core/dispatch-sync","config","cljs.core/boolean?","kee-frame.state/breakpoints-initialized?","kee-frame.interop/set-breakpoint-subs","kee-frame.interop/set-breakpoints","G__56742","G__56743","re-frame.core/reg-sub","kee-frame.interop/render-root","kee-frame.router/make-route-component","component","cljs.core/fn?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kee-frame.router/switch-route","seq56744","G__56745","cljs.core/first","cljs.core/next","self__4776__auto__","f","pairs","cljs.core/even?","G__56747","re-frame.core/subscribe","dispatch-value","G__56748","G__56752","vec__56753","seq__56754","first__56755","vec__56756","seq__56757","first__56758","first-pair","rest-pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","vec__56759","value"],"sourcesContent":["(ns ^:no-doc kee-frame.router\n  (:require [kee-frame.interop :as interop]\n            [re-frame.core :as rf]\n            [re-chain.core :as chain]\n            [kee-frame.api :as api :refer [dispatch-current! navigate! url->data data->url]]\n            [kee-frame.interop :as interop]\n            [kee-frame.state :as state]\n            [kee-frame.scroll :as scroll]\n            [kee-frame.controller :as controller]\n            [reitit.core :as reitit]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [kee-frame.spec :as spec]\n            [expound.alpha :as e]))\n\n(def default-chain-links [{:effect-present? (fn [effects] (:http-xhrio effects))\n                           :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                           :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n\n(defn url [data]\n  (when-not @state/router\n    (throw (ex-info \"No router defined for this app\" {:router @state/router})))\n  (data->url @state/router data))\n\n(defn goto [data]\n  (navigate! @state/navigator (url data)))\n\n(defn nav-handler [router]\n  (fn [path]\n    (if-let [route (url->data router path)]\n      (rf/dispatch [::route-changed route])\n      (do (rf/console :group \"No route match found\")\n          (rf/console :error \"No match found for path \" path)\n          (rf/console :groupEnd)))))\n\n(s/def ::reitit-route-data (s/cat :route-name keyword? :path-params (s/* (s/map-of keyword? any?))))\n\n(defn assert-route-data [data]\n  (when-not (s/valid? ::reitit-route-data data)\n    (e/expound ::reitit-route-data data)\n    (throw (ex-info \"Bad route data input\" (s/explain-data ::reitit-route-data data)))))\n\n(defn url-not-found [routes data]\n  (throw (ex-info \"Could not find url for the provided data\"\n                  {:routes routes\n                   :data   data})))\n\n(defn route-match-not-found [routes url]\n  (throw (ex-info \"No match for URL in routes\"\n                  {:url    url\n                   :routes routes})))\n\n(defn match-data [routes route hash?]\n  (let [[_ path-params] route]\n    (str (when hash? \"/#\") (:path (apply reitit/match-by-name routes route))\n         (when-some [q (:query-string path-params)] (str \"?\" q))\n         (when-some [h (:hash path-params)] (str \"#\" h)))))\n\n(defn match-url [routes url]\n  (let [[path+query fragment] (-> url (str/replace #\"^/#/\" \"/\") (str/split #\"#\" 2))\n        [path query] (str/split path+query #\"\\?\" 2)]\n    (some-> (reitit/match-by-path routes path)\n            (assoc :query-string query :hash fragment))))\n\n(defrecord ReititRouter [routes hash?]\n  api/Router\n  (data->url [_ data]\n    (assert-route-data data)\n    (or (match-data routes data hash?)\n        (url-not-found routes data)))\n  (url->data [_ url]\n    (or (match-url routes url)\n        (route-match-not-found routes url))))\n\n(defn bootstrap-routes [routes router hash-routing? scroll]\n  (let [initialized? (boolean @state/navigator)\n        router (or router (->ReititRouter (reitit/router routes) hash-routing?))]\n    (reset! state/router router)\n    (rf/reg-fx :navigate-to goto)\n\n    (when-not initialized?\n      (when scroll (scroll/start!))\n      (reset! state/navigator\n              (interop/make-navigator {:nav-handler  (nav-handler router)\n                                       :path-exists? #(boolean (url->data router %))})))\n    (dispatch-current! @state/navigator)))\n\n(rf/reg-event-db :init (fn [db [_ initial]] (merge initial db)))\n\n\n(defn debug-enabled? []\n  (let [{:keys [routes?]\n         :or   {routes? true}}  @state/debug-config]\n    (and @state/debug?\n         routes?)))\n\n(defn reg-route-event [scroll]\n  (rf/reg-event-fx ::route-changed\n                   (when (debug-enabled?) [rf/debug])\n                   (fn [{:keys [db] :as ctx} [_ route]]\n                     (when scroll\n                       (scroll/monitor-requests! route))\n                     (swap! state/controllers controller/apply-route ctx route)\n                     (merge {:db (assoc db :kee-frame/route route)}\n                            (when scroll\n                              {:dispatch-later [{:ms       50\n                                                 :dispatch [::scroll/poll route 0]}]})))))\n\n(defn start! [{:keys [routes initial-db router hash-routing? app-db-spec debug? root-component chain-links\n                      screen scroll debug-config]\n               :or   {debug? false\n                      scroll true}}]\n  (interop/set-log-level! debug-config)\n  (reset! state/app-db-spec app-db-spec)\n  (reset! state/debug? debug?)\n  (reset! state/debug-config debug-config)\n  (chain/configure! (concat default-chain-links\n                            chain-links))\n\n  (reg-route-event scroll)\n  (when (and routes router)\n    (throw (ex-info \"Both routes and router specified. If you want to use these routes, pass them to your router constructor.\"\n                    {:routes routes\n                     :router router})))\n  (when (or routes router)\n    (bootstrap-routes routes router hash-routing? scroll))\n\n  (when initial-db\n    (rf/dispatch-sync [:init initial-db]))\n\n  (when screen\n    (let [config (when-not (boolean? screen) screen)]\n      (if @state/breakpoints-initialized?\n        (interop/set-breakpoint-subs config)\n        (do (interop/set-breakpoints config)\n            (reset! state/breakpoints-initialized? true)))))\n\n  (rf/reg-sub :kee-frame/route (fn [db] (:kee-frame/route db nil)))\n  (interop/render-root root-component))\n\n(defn make-route-component [component route]\n  (if (fn? component)\n    [component route]\n    component))\n\n(defn switch-route [f & pairs]\n  (when-not (even? (count pairs))\n    (throw (ex-info \"switch-route accepts an even number of args\" {:pairs       pairs\n                                                                   :pairs-count (count pairs)})))\n  (let [route (rf/subscribe [:kee-frame/route])\n        dispatch-value (f @route)]\n    (loop [[first-pair & rest-pairs] (partition 2 pairs)]\n      (if first-pair\n        (let [[value component] first-pair]\n          (if (= value dispatch-value)\n            (make-route-component component @route)\n            (recur rest-pairs)))\n        (throw (ex-info \"Could not find a component to match route. Did you remember to include a case for nil?\"\n                        {:route          @route\n                         :dispatch-value dispatch-value\n                         :pairs          pairs}))))))"]}