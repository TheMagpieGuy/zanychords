{"version":3,"sources":["kee_frame/scroll.cljs"],"mappings":";;;;;;AAMA,AAAA,AAACA,AACgB,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AAAAH,AAAAD,AAAA,AAAA,AAAiBK;AAAjB,AACMH,AACA,AAAA,AAAA,AAAA,AAACI,AAAiCF,AAClC,AAAA,AAAA,AAAA,AAACG,AAAqCF;;AAE7D,AAAA,AAAMG;AAAN,AACE,AAACC;;AAEH,AAAA,AAAMC,AAAmBN;AAAzB,AACE,AAACO,AAAqB,AAAA,AAAOP;;AAC7B,AAACQ,AAAMC,AACA,AAAKC;AAAL,AACE,AAACC,AAAK,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAA,AAACC,AAAyB,AAAA,AAAAF;AAAWF,AAC9C,AAAAK,AAAA,AAAA,AAAA,AAAA,AACgC,AAAKE;AAAL,AACE,AAAAC,AAAA,AAAA,AAAmClB,AAAMoB;AAAzC,AAAA,AAAAF,AAAAA,AAACC,AAAAA,AAAAA;;AACDF;AAHlC,AAIgC,AAAKI;AAAL,AACE,AAAAC,AAAA,AAAA,AAAmCtB,AAAMuB;AAAzC,AAAA,AAAAD,AAAAA,AAACH,AAAAA,AAAAA;;AACDE;;AANlC,AAAA,AAAAN,AAAAA,AAACC,AAAAA,AAAAA;;;;AAQlB,AAAA,AAACQ,AACgB,AAAKzB,AAAEA;AAAP,AACE,AAAC0B,AAAeC;;AADlB;;AAIjB,AAAA,AAACF,AACgB,AAAAG,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAa/B;AAAboC,AAAAN;AAAA,AAAA/B,AAAAqC,AAAA,AAAA,AAAmBnC;AAAnB,AAAAF,AAAAqC,AAAA,AAAA,AAAqBC;AAArB,AAAAtC,AAAAqC,AAAA,AAAA,AAAkCE;AAAlC,AACE,AAAAC,AAA8B,AAAA,AAAgBvC;AAA9CuC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAP,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAAK,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAcrC;AAAd,AAAAiC,AAAAI,AAAA,AAAoBC;AAApB,AACE,AAAM,AAACC,AAAEvC,AAAMmC;AAAf,AACE,AACE,AAAK,AAAA,AAAMG;AADb,AAAA,AAAA,AAAA;;AAAA,AAEE,AAAA,AAAMA;AAFR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsDH,AAAa,AAAA,AAAKC;;AAHxE,AAIE,AAAA,AAAMA;AAJR,AAAA,AAIsB,AAAA,AAAA,AAACI,AAAM1C;;AAJ7B;;;;;AADF","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__54157","vec__54158","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","route","inc-or-dec","cljs.core/assoc-in","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","kee-frame.scroll/start!","clerk.core/initialize!","kee-frame.scroll/monitor-requests!","clerk.core/navigate-page!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","ajax.core/default-interceptors","interceptors","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p1__54162#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__54165","ajax.core/to-interceptor","request","G__54166","re-frame.core/dispatch","cljs.core/inc","response","G__54167","cljs.core/dec","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","reagent.core/after-render","clerk.core/after-render!","p__54170","p__54171","map__54172","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__54173","active-route","counter","map__54177","balance","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns ^:no-doc kee-frame.scroll\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [reagent.core :as r]\n            [clerk.core :as clerk]))\n\n(rf/reg-event-db ::connection-balance\n                 (fn [db [_ route inc-or-dec]]\n                   (-> db\n                       (assoc-in [:route-counter :route] route)\n                       (update-in  [:route-counter :balance] inc-or-dec))))\n\n(defn start! []\n  (clerk/initialize!))\n\n(defn monitor-requests! [route]\n  (clerk/navigate-page! (:path route))\n  (swap! ajax/default-interceptors\n         (fn [interceptors]\n           (conj (filter #(not= \"route-interceptor\" (:name %)) interceptors)\n                 (ajax/to-interceptor {:name     \"route-interceptor\"\n                                       :request  (fn [request]\n                                                   (rf/dispatch [::connection-balance route inc])\n                                                   request)\n                                       :response (fn [response]\n                                                   (rf/dispatch [::connection-balance route dec])\n                                                   response)})))))\n\n(rf/reg-event-fx ::scroll\n                 (fn [_ _]\n                   (r/after-render clerk/after-render!)\n                   nil))\n\n(rf/reg-event-fx ::poll\n                 (fn [{:keys [db]} [_ active-route counter]]\n                   (let [{:keys [route balance]} (:route-counter db)]\n                     (when (= route active-route)\n                       (cond\n                         (not (pos? balance)) {:dispatch [::scroll]}\n                         (pos? balance) {:dispatch-later [{:ms       50\n                                                           :dispatch [::poll active-route (inc counter)]}]}\n                         (< 20 counter) {:db (assoc db :route-counter nil)})))))\n\n"]}