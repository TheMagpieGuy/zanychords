{"version":3,"sources":["kee_frame/interop.cljs"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k53812","else__4442__auto__","G__53816","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__53817","vec__53818","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","G__53811","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","cljs.core/PROTOCOL_SENTINEL","this__4435__auto__","h__4297__auto__","fexpr__53843","coll__4436__auto__","cljs.core/hash-unordered-coll","this53813","other53814","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__53860","cljs.core/keyword-identical?","expr__53861","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","kee-frame.interop/AccountantNavigator","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__53815","extmap__4478__auto__","G__53870","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1","cljs.core/record?","kee-frame.interop/->AccountantNavigator","kee-frame.interop/map->AccountantNavigator","_","accountant.core/dispatch-current!","url","accountant.core.navigate_BANG_.cljs$core$IFn$_invoke$arity$1","kee-frame.interop/create-socket","chord.client/ws-ch","kee-frame.interop/websocket-url","path","clojure.string/starts-with?","js/document","kee-frame.interop/make-navigator","opts","accountant.core/configure-navigation!","kee-frame.interop/render-root","root-component","temp__5733__auto__","app-element","reagent.core.render.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","kee-frame.interop/breakpoints-or-defaults","breakpoints","or__4185__auto__","kee-frame.interop/set-breakpoint-subs","breaking-point.core/register-subs","kee-frame.interop/set-breakpoints","G__53871","re-frame.core/dispatch-sync","p__53872","map__53874","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","kee-frame.interop/set-log-level!","overwrites?","re-frame.loggers/set-loggers!","args","cljs.core/re-find","cljs.core/first","js/console.warn"],"sourcesContent":["(ns ^:no-doc kee-frame.interop\n  (:require [kee-frame.api :as api]\n            [accountant.core :as accountant]\n            [reagent.core :as reagent]\n            [re-frame.core :as rf]\n            [day8.re-frame.http-fx]\n            [chord.client :as chord]\n            [breaking-point.core :as bp]\n            [clojure.string :as str]\n            [re-frame.loggers :as rf.log]))\n\n(defrecord AccountantNavigator []\n  api/Navigator\n  (dispatch-current! [_]\n    (accountant/dispatch-current!))\n  (navigate! [_ url]\n    (accountant/navigate! url)))\n\n(def create-socket chord/ws-ch)\n\n(defn websocket-url [path]\n  (if (str/starts-with? path \"/\")\n    (str (if (= \"https:\" (-> js/document .-location .-protocol))\n           \"wss://\"\n           \"ws://\")\n         (-> js/document .-location .-host)\n         path)\n    ;; Consider this an url for now.\n    path))\n\n(defn make-navigator\n  [opts]\n  (accountant/configure-navigation! opts)\n  (->AccountantNavigator))\n\n(defn render-root [root-component]\n  (when root-component\n    (if-let [app-element (.getElementById js/document \"app\")]\n      (reagent/render root-component\n                      app-element)\n      (throw (ex-info \"Could not find element with id 'app' to mount app into\" {:component root-component})))))\n\n(defn breakpoints-or-defaults [breakpoints]\n  (or breakpoints\n      {:debounce-ms 166\n       :breakpoints [:mobile\n                     768\n                     :tablet\n                     992\n                     :small-monitor\n                     1200\n                     :large-monitor]}))\n\n(defn set-breakpoint-subs [breakpoints]\n  (bp/register-subs (:breakpoints (breakpoints-or-defaults breakpoints))))\n\n(defn set-breakpoints [breakpoints]\n  (rf/dispatch-sync [::bp/set-breakpoints (breakpoints-or-defaults breakpoints)]))\n\n(defn set-log-level! [{:keys [overwrites?]\n                       :or   {overwrites? false}}]\n  (when-not overwrites?\n    (rf.log/set-loggers!\n     {:warn (fn [& args]\n              (when-not (re-find #\"^re-frame: overwriting\" (first args))\n                (apply js/console.warn args)))})))"]}