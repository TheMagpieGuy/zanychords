{"version":3,"sources":["chord/format.cljc"],"mappings":"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","names":["x__4487__auto__","m__4488__auto__","chord.format/freeze","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","chord.format/thaw","chord.format/ChordFormatter","_","obj","s","js/chord","js/chord.format","js/chord.format.formatter*","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__53463","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","chord.format/formatter*","js/chord.format.t_chord$format53464","chord.format/t_chord$format53464","_53466","meta53465","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","chord.format/->t_chord$format53464","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/chord.format.t_chord$format53470","chord.format/t_chord$format53470","_53472","meta53471","chord.format/->t_chord$format53470","js/JSON.stringify","cljs.core/clj->js","this","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON.parse","opts","json-formatter","G__53487","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/chord.format.t_chord$format53490","chord.format/t_chord$format53490","_53492","meta53491","chord.format/->t_chord$format53490","clojure.walk/keywordize-keys","js/chord.format.t_chord$format53493","chord.format/t_chord$format53493","_53495","meta53494","chord.format/->t_chord$format53493","cognitect.transit/write","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1","cognitect.transit/read","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1","js/chord.format.t_chord$format53496","chord.format/t_chord$format53496","_53498","meta53497","chord.format/->t_chord$format53496","chord.format/formatter","G__53499","cljs.core/Keyword","p__53501","p__53502","map__53503","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__53504","chord.format/wrap-format","read-ch","write-ch","format","fmtr","cljs.core.async/map<","p__53507","map__53508","message","e53510","js/Error","e","p1__53500#","cljs.core.async/map>"],"sourcesContent":["(ns chord.format\n  (:require #?(:clj [cheshire.core :as json])\n\n            #?(:clj [clojure.core.async :as a]\n               :cljs [cljs.core.async :as a])\n\n            #?(:clj [clojure.java.io :as io])\n\n            #?(:clj [clojure.tools.reader.edn :as edn]\n               :cljs [cljs.reader :as edn])\n\n            [clojure.walk :refer [keywordize-keys]]\n            [cognitect.transit :as transit])\n\n  #?(:clj (:import [java.io ByteArrayOutputStream ByteArrayInputStream])))\n\n(defprotocol ChordFormatter\n  (freeze [_ obj])\n  (thaw [_ s]))\n\n(defmulti formatter* :format)\n\n(defmethod formatter* :edn [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      (pr-str obj))\n\n    (thaw [_ s]\n      (edn/read-string s))))\n\n(defmethod formatter* :json [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      #?(:clj (json/encode obj))\n      #?(:cljs (js/JSON.stringify (clj->js obj))))\n\n    (thaw [this s]\n      #?(:clj (json/decode s))\n      #?(:cljs (js->clj (js/JSON.parse s))))))\n\n(defmethod formatter* :json-kw [opts]\n  (let [json-formatter (formatter* (assoc opts :format :json))]\n    (reify ChordFormatter\n      (freeze [_ obj]\n        (freeze json-formatter obj))\n\n      (thaw [_ s]\n        (keywordize-keys (thaw json-formatter s))))))\n\n(defmethod formatter* :transit-json [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      #?(:clj\n       (let [baos (ByteArrayOutputStream.)]\n         (transit/write (transit/writer baos :json) obj)\n         (.toString baos)))\n\n      #?(:cljs\n       (transit/write (transit/writer :json) obj)))\n\n    (thaw [_ s]\n      #?(:clj\n       (let [bais (ByteArrayInputStream. (.getBytes s))]\n         (transit/read (transit/reader bais :json))))\n\n      #?(:cljs\n       (transit/read (transit/reader :json) s)))))\n\n(defmethod formatter* :str [_]\n  (reify ChordFormatter\n    (freeze [_ obj]\n      obj)\n\n    (thaw [_ s]\n      s)))\n\n(defn formatter [opts]\n  (formatter* (if (keyword? opts)\n                {:format opts}\n                opts)))\n\n(defn wrap-format [{:keys [read-ch write-ch]} {:keys [format] :as opts}]\n  (let [fmtr (formatter (if format\n                          opts\n                          {:format :edn}))]\n\n    ;; TODO need to replace a/map< etc with transducers when 1.7.0 is\n    ;; released\n\n    {:read-ch (a/map< (fn [{:keys [message]}]\n                        (try\n                          (when message\n                            {:message (thaw fmtr message)})\n                          (catch #?(:clj Exception, :cljs js/Error) e\n                                 {:error :invalid-format\n                                  :cause e\n                                  :invalid-msg message})))\n                      read-ch)\n\n     :write-ch (a/map> #(when %\n                          (freeze fmtr %))\n                       write-ch)}))\n"]}