{"version":3,"sources":["kee_frame/debug.cljc"],"mappings":";;;;;;AAMA,AAAA,AAAAA,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAuBG;AAAvB,AACE,AAAAC,AAAA,AAAAC,AAC8BQ;AAD9BT,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAA,AAAAK,AAAAL,AAAA,AAAcO;AAAd,AAAAD,AAAAN,AAAA,AAAA,AAAwBQ;AAAxB,AAEE,AAAAE,AAAA,AAAAT,AAAMU;AAAN,AAAA,AAAAD;AAAA,AAAAA,AACKF;AADL,AAAA,AAAAE;AAEK,AAACE,AAAI,AAAAF,AAAKH;AAAL,AAAA,AAAAG;AACK,AAACH,AAAAA,AAAAA,AAAUR,AAAAA;;AADhBW;;;;AAFVA;;;AAAAA;;;AAKJ,AAAA,AAAMG,AAAmBC;AAAzB,AACE,AAAA,AAAA,AAAA,AAACC,AAES,AACGC;AADH,AAEE,AAAMC,AAAM,AAAA,AAACC,AAAaF;AAA1B,AACE,AAAM,AAAClB,AAAemB;AAAtB,AACE,AAAAE,AAAA;AAAAC,AAAA;AAAAC,AAAgCJ;AAAhC,AAAA,AAAAE,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AADH;;AAEAN;AAPd,AAQS,AACGA;AADH,AAEE,AAAMC,AAAM,AAAA,AAACC,AAAaF;AACpBO,AAAQ,AAAA,AAACL,AAAaF;AACtBQ,AAAO,AAAA,AAAA,AAACC,AAAWT;AACnBU,AAAQ,AAAA,AAACC,AAAO,AAACC,AAAWZ;AAHlC,AAKE,AAAM,AAAAN,AAAK,AAACZ,AAAemB;AAArB,AAAA,AAAAP;AAA4B,AAACmB,AAAIH;;AAAjChB;;;AAAN,AACE,AAAAoB,AAAA;AAAAC,AAAA;AAAAC,AAA8C,AAACG,AAAMlB;AAArDgB,AAAA;AAAAC,AAAiER;AAAjE,AAAA,AAAAI,AAAAC,AAAAC,AAAAC,AAAAC,AAAAJ,AAAAC,AAAAC,AAAAC,AAAAC,AAACZ,AAAAA,AAAAA;;AADH;;AAGA,AAAM,AAAAZ,AAAK,AAACZ,AAAemB;AAArB,AAAA,AAAAP;AAA4B,AAAA,AAAC0B,AAAKZ;;AAAlCd;;;AAAN,AACE,AAAA2B,AAA+B,AAACG,AAAUjB,AAAQC;AAAlD,AAAA3B,AAAAwC,AAAA,AAAA,AAAOC;AAAP,AAAAzC,AAAAwC,AAAA,AAAA,AAAmBE;AACbE,AAAY,AAAI,AAAA,AAAA,AAAOH,AAAa,AAAA,AAAA,AAAOC;AADjD,AAEE,AAAME;AAAN,AACE,AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAA4C,AAACT,AAAMlB;AAAnD,AAAA,AAAAyB,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACtB,AAAAA,AAAAA;;AACD,AAAAuB,AAAA;AAAAC,AAAA;AAAAC,AAA6BT;AAA7B,AAAA,AAAAO,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACzB,AAAAA,AAAAA;;AACD,AAAA0B,AAAA;AAAAC,AAAA;AAAAC,AAA6BX;AAA7B,AAAA,AAAAS,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC5B,AAAAA,AAAAA;;AACD,AAAA6B,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7B,AAAAA,AAAAA;;AAJH;;AAHJ;;AAQAN","names":["p__56465","vec__56466","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","kee-frame.debug/debug-enabled?","event-key","map__56469","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","blacklist","events?","kee-frame.state/debug-config","and__4174__auto__","kee-frame.state/debug?","cljs.core/not","kee-frame.debug/debug-interceptor","debug?","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","event","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2","G__56473","G__56474","G__56475","re-frame.core/console","orig-db","new-db","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3","effects","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","G__56476","G__56477","G__56478","G__56479","G__56480","cljs.core/first","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","vec__56481","only-before","only-after","clojure.data/diff","db-changed?","G__56485","G__56486","G__56487","G__56488","G__56489","G__56490","G__56491","G__56492","G__56493","G__56498"],"sourcesContent":["(ns ^:no-doc kee-frame.debug\n  (:require [re-frame.core :refer [console]]\n            [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [clojure.data :as data]\n            [kee-frame.state :as state]))\n\n(defn debug-enabled? [[event-key]]\n  (let [{:keys [blacklist events?]\n         :or   {events? true}} @state/debug-config]\n    (and @state/debug?\n         events?\n         (not (and blacklist\n                   (blacklist event-key))))))\n\n(defn debug-interceptor [debug?]\n  (->interceptor\n    :id :debug\n    :before (fn debug-before\n              [context]\n              (let [event (get-coeffect context :event)]\n                (when (debug-enabled? event)\n                  (console :log \"Handling event \" event))\n                context))\n    :after (fn debug-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db (get-effect context :db ::not-found)\n                   effects (dissoc (get-effect context) :db)]\n\n               (when (and (debug-enabled? event) (seq effects))\n                 (console :log \"Side effects caused by event \" (first event) \": \" effects))\n\n               (when (and (debug-enabled? event) (not= new-db ::not-found))\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed? (or (some? only-before) (some? only-after))]\n                   (when db-changed?\n                     (console :group \"db clojure.data/diff for:\" (first event))\n                     (console :log \"only before:\" only-before)\n                     (console :log \"only after :\" only-after)\n                     (console :groupEnd))))\n               context))))"]}